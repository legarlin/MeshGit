Class meshComponent 
	Takes in a vert for now, later will store faces and adjacencies
	Enum which says whether it is a Face Vert or Edge
	
Class ComponentMatch 
	stores:
		two meshGitComponents
		cost of matching the two components
		
	methods:
		computegeometricCost
		computeAdjacencyCost
		computeAdditionCost?
		computeDeletionCost?
		
	
	
Class MatchComputer  //does all the work

	stores: 
		vector called bestComponentMatches, stores final ComponentMatches, updates on each iteration
		vector called allComponentMatches, stores all the possible matches between each vertex. 
		
	Methods:	
	Greedy Algorithm
		
		Create N1*N2 ComponentMatch objects, i.e. match all vertices in meshA with all vertices in meshB and put them in a minHeap which sorts it by cost 
		Store the above in allComponentMatches vector
		
		Initialize best matches as empty intially, and numUnmatched as N1 + N2	
		
		iteration step:
			calculate old cost 
			pick lowest ComponentMatch from minheap
			check if lowest componentmatch components are already in bestMatches, if so then go to next iteration
			
			
			Find out total cost of using this new match instead
			COMPARE THE OLD AND NEW COSTS
			if new is lower, update and iterate again
			if new is higher end all iterations
		
		end

		
	
	
	
	
	